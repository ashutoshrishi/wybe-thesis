\relax 
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Abstract}{2}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\citation{irnote}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Introduction}{3}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\citation{lpvm2015}
\citation{lpvm2015}
\citation{cpp_compiler}
\citation{make}
\citation{Lattner:MSThesis02}
\citation{lpvm2015}
\citation{alpernSSA}
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Literature}{5}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:literature_review}{{3}{5}}
\citation{cytronSSA}
\citation{gsa}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Horn Clauses as an Intermediate Representation \citep  {lpvm2015}}{6}}
\newlabel{sec:horn_clauses}{{3.1}{6}}
\citation{appelfp}
\citation{cpp_compiler}
\citation{cpp_compiler}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Comparison of SSA and LPVM for the gcd function.}}{8}}
\newlabel{fig:gcd_ssa_lpvm}{{3.1}{8}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Achieving Incremental Compilation through\\ Fine-grained Builds \citep  {cpp_compiler}}{8}}
\newlabel{sec:cpp_compiler}{{3.2}{8}}
\citation{lpvm2015}
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Implementation of LPVM}{10}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:lpvm}{{4}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces SSA statement and their equivalent LPVM goals}}{10}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces LPVM Implementation Data Type}}{11}}
\newlabel{fig:lpvm_data_type}{{4.2}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.3}{\ignorespaces LPVM Procedures generated for an Imperative Loop}}{11}}
\newlabel{fig:loop_lpvm}{{4.3}{11}}
\@writefile{toc}{\contentsline {chapter}{\numberline {5}Wybe Programming Language}{13}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:wybe}{{5}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.1}{\ignorespaces Sample of the wybe.int module from Wybe standard library}}{13}}
\newlabel{fig:wybe_int}{{5.1}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.2}{\ignorespaces Bool type as an Algebraic Data Type from the Wybe standard library}}{14}}
\newlabel{fig:wybe_bool}{{5.2}{14}}
\@writefile{toc}{\contentsline {chapter}{\numberline {6}Transforming Wybe to LPVM}{16}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:wybe_to_lpvm}{{6}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {6.1}{\ignorespaces Normalisation of Wybe functions to Procedures.}}{16}}
\newlabel{fig:wybe_convert_to_proc}{{6.1}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {6.2}{\ignorespaces The Procedure Implementation Algebraic Data Type}}{17}}
\newlabel{fig:proc_impln}{{6.2}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.0.1}Flattening Pass}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.0.2}Type Checking Pass}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.0.3}Un-branching Pass}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.0.4}Clause Generation Pass}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {6.0.5}Expansion Pass}{18}}
\citation{make}
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Wybemk, Compiler and Build System}{20}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:build_system}{{7}{20}}
\@writefile{toc}{\contentsline {section}{\numberline {7.1}Storing structures in Object files}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.1}Mach-O Object File Format}{22}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.2}Bitcode Wrapper}{22}}
\@writefile{toc}{\contentsline {section}{\numberline {7.2}Incremental Compilation}{23}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.1}Module level reloading}{23}}
\citation{cpp_compiler}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.2}Incrementality through Hashing}{24}}
\@writefile{toc}{\contentsline {chapter}{\numberline {8}Code Generation to LLVM}{26}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{chap:codegen_llvm}{{8}{26}}
\@writefile{toc}{\contentsline {section}{\numberline {8.1}Transforming LPVM to LLVM}{26}}
\newlabel{sec:lpvm_to_llvm}{{8.1}{26}}
\@writefile{toc}{\contentsline {section}{\numberline {8.2}Code generation for Wybe types with LLVM}{27}}
\newlabel{sec:type_codegen}{{8.2}{27}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.1}{\ignorespaces Transformation of the LPVM form of \textit  {GCD} to LLVM}}{28}}
\newlabel{fig:lpvm_to_llvm}{{8.1}{28}}
\bibstyle{apalike}
\bibdata{refs}
\bibcite{alpernSSA}{{1}{1988}{{Alpern et~al.}}{{}}}
\bibcite{appelfp}{{2}{1998}{{Appel}}{{}}}
\bibcite{cpp_compiler}{{3}{1997}{{Cooper and Wise}}{{}}}
\bibcite{cytronSSA}{{4}{1991}{{Cytron et~al.}}{{}}}
\bibcite{make}{{5}{1979}{{Feldman}}{{}}}
\bibcite{lpvm2015}{{6}{2015}{{Gange et~al.}}{{}}}
\bibcite{irnote}{{7}{2008}{{Johnson}}{{}}}
\bibcite{Lattner:MSThesis02}{{8}{2002}{{Lattner}}{{}}}
\bibcite{gsa}{{9}{1990}{{Ottenstein et~al.}}{{}}}
